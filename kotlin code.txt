//topics
	//databinding
		//to bind views as well as their data
		//slows the system a bit
//plugins
	//for referencing views
		id 'kotlin-android-extensions' 
	//data binding		
		id 'kotlin-kapt'
	
	//works with navigation safe args dependency
		id 'androidx.navigation.safeargs.kotlin' 
	//dagger_hilt
		id 'kotlin-kapt'
    		id 'dagger.hilt.android.plugin'

//classpath
	classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.1"
	
	//dagger_hilt
		classpath "com.google.dagger:hilt-android-gradle-plugin:2.28.3-alpha"
	
//to hide actionbar
	supportActionBar?.hide()
//color
	//to pick color    https://material.io/design/color/the-color-system.html#tools-for-picking-colors  
//safe calls
	?. 
//Left alt+enter
	If alt+enter is not working
	
//Firebase console
	https://console.firebase.google.com/u/0/

//Google Api Services
	https://console.developers.google.com/ 

//Internet Permission
	<uses-permission android:name="android.permission.INTERNET" /> 
	
//maven repository
	maven {
	          url 'https://maven.google.com'
	        } 
	 maven { url 'https://jitpack.io' }
//google sign in android
	https://firebase.google.com/docs/auth/android/google-signin

//android studio keyboard shortcuts
	Ctrl+ I – to implement methods
	Ctrl+ O – to override functions
	Ctrl + B – To go to declaration  //u can see function call also,like where the func is called, it will return a list of func calls in case of multiple calls
	Ctrl + D – To duplicate line
	Ctrl + Q - To know about function, type of variable, you can read function description also
	Ctrl + P - To see parameters
	Ctrl + G - to go to particular line in android studio
	Alt + F7 - To find usages
	shift + F6 - to rename files
	tab - right-click -> close other tabs

//to generate constructors
	right-click -> generate -> secondary constructors
//Log statement
	logd -> press enter to autocomplete
//Toast statement
	Toast.makeText(context,"Please enter all the information",Toast.LENGTH_SHORT).show()
	//to change toast on condition
	Toast.makeText(this, if(isChecked) "Geek Mode ON" else "Geek Mode OFF", Toast.LENGTH_SHORT).show()
	toast -> press enter to autocomplete
//Custom Toast	
Toast(this).apply {					
                duration = Toast.LENGTH_LONG		
this is a sample text				
                view = layoutInflater.inflate(R.layout.custom_toast,clToast)
                show()
            }
//SH1 certificate	   
	Gradle-Tasks-android-signingReport
//Intent
	val dashboardIntent = Intent(this, DashboardActivity::class.java)
	startActivity(dashboardIntent)
	//to disable back
	finish()
	Intent(this, ThirdActivity::class.java).also {
                startActivity(it)
            }
	//to pass value through intent
		it.putExtra("EXTRA_NAME",name)
	//to get value from intent
		val name = intent.getStringExtra("EXTRA_NAME")
	//to check null
		errorMsg = intent.getStringExtra("errorMsg") ?: "Invalid User"
//Initialize variable and assign value later		
	private lateinit var
//To build apk	
	Build-Generate Signed Bundle/apk
//to deploy apps	
	google play console
//To move views upwards while using keyboard	
	<activity android:name=".UiActivities.SignInCopy"
            android:windowSoftInputMode="stateVisible|adjustResize"	-- use inside manifest file activity
            />
//To stop views from moving upwards while using keyboard
	<activity android:name=".UiActivities.SignInCopy"
            android:windowSoftInputMode="adjustPan|adjustResize"	-- use inside manifest file activity
            />
//to set image	
	imageView2.setImageResource(bundle!!.getInt("image"))
//recycler view	
	implementation 'androidx.recyclerview:recyclerview:1.1.0'
//to display image from url	
	implementation 'com.squareup.picasso:picasso:2.71828'
//android networking library	
	implementation 'com.amitshekhar.android:android-networking:1.0.2'
//libraries
	//libraries Notes
		//implementation 'com.google.firebase:firebase-firestore-ktx:22.1.0'
		//-ktx -> refers to kotlin version of firestore and it is optimized for kotlin
		//implementation 'androidx.appcompat:appcompat:1.2.0'
		//androidx -> refers to the latest version, android is deprecated
	//Dagger - Hilt
		implementation "com.google.dagger:hilt-android:2.28-alpha"
    		kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    		implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02"
    		kapt "androidx.hilt:hilt-compiler:1.0.0-alpha02"

	//Activity KTX for viewModels()
    		implementation "androidx.activity:activity-ktx:1.1.0"
	//google sign in 
    		implementation 'com.google.android.gms:play-services-auth:19.0.0'
	// Preferences DataStore
    		implementation "androidx.datastore:datastore-preferences:1.0.0-alpha04"
    
	//coroutines
		implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
		implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'
		implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'
		
	// Coroutine Lifecycle Scopes
    		implementation  'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    		implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"		
		

	//retrofit2
		implementation 'com.squareup.retrofit2:retrofit:2.9.0'
		implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
		implementation 'com.squareup.okhttp3:logging-interceptor:4.5.0'
		implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
	
	// Navigation Component
		implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
		implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'

     	// Room components
    		implementation "androidx.room:room-runtime:2.2.6"
    		kapt "androidx.room:room-compiler:2.2.6"
    		implementation "androidx.room:room-ktx:2.2.6"
    		androidTestImplementation "androidx.room:room-testing:2.2.6"

    	//Lifecycle components
		implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
		implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0"
		implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
		
		def arch_version = '2.2.0-alpha01'
		implementation "androidx.lifecycle:lifecycle-runtime-ktx:$arch_version"

    	// Kotlin components
		implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.72"
		api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"
		api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5"
		
	// AnyChart components
		implementation 'com.github.AnyChart:AnyChart-Android:1.1.2'
		implementation 'com.android.support:multidex:1.0.3'
		multiDexEnabled true -- inside defaultConfig
		
	//ViewModel and LiveData
		implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    	//Recyclerview
    		implementation 'androidx.recyclerview:recyclerview:1.1.0'
	//CardView
		implementation "androidx.cardview:cardview:1.0.0"
	//Networking
		implementation 'com.amitshekhar.android:android-networking:1.0.2'

    	// Gson
		implementation "com.google.code.gson:gson:2.8.6"

    	// Glide
		implementation 'com.github.bumptech.glide:glide:4.11.0'

    	// Paging
		implementation "androidx.paging:paging-runtime:2.1.2"

    	//Rx
		implementation 'io.reactivex.rxjava2:rxjava:2.2.7'
		implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

//to print log msg
	Log.d("MyIntentService","Service is stopping...")
	
//for api calls
	sample APi or https://reqres.in/

//for viewing json on chrome
	json viewer chrome extensions 
//Kotlin Networking(for api calls)
	Retrofit, Volley 
	 
	ref - https://www.youtube.com/watch?v=sBCE_hOFnQU
//api list
	//cat-facts api
		https://alexwohlbruck.github.io/cat-facts/docs/
		
	//fake api - Free to use fake Online REST API for testing and prototyping
		https://jsonplaceholder.typicode.com/
		
	//Documentation and Test Consoles for Over 1400 Public APIs
		https://public-apis.io/
		
	//to generate fake api
		https://www.mockable.io/a/#/
		
	//Foreign exchange rates API
	with currency conversion
		ref - https://exchangeratesapi.io/
	
		
//change actionbar name
	setupActionBarWithNavController(findNavController(R.id.fragment))
	
//Debugging
	verbose - caused by or general error msg
	//put breaking points using debugger and see values going step by step or go inside function if found error

//Git
	you can control android using local gitbash
//push code to github
	open git bash at desired location
	git init - to initialize the repository
	git add . - to add all the files to the given folder.
	git status - to view all the files which are going to be staged to the first commit.
	git commit -m 'first commit' - which adds the change to the local repository.
	The HTTPS or URL is copied from the given GitHub account, which is the place of the remote repository.
	git remote add origin 'your_url_name'
	git push -u origin master - used for pushing local content to GitHub. master is the local branch name from which data is being pushed. you can give other branch name 	
	also eg - second, third
	//to check origin
		git remote -v
	//git delete local repository 
		view tab -> show hidden files -> Delete the .git directory 
		ref - https://stackoverflow.com/questions/1514054/how-do-i-delete-a-local-repository-in-git
	//change remote url git
		git remote set-url origin "https://github.com/abhineshchandra1234/repository.git"
		https://github.com/abhineshchandra1234/repository.git
	
		//to see commit details.	
			git log -  Press "enter" to scroll. Press "q" to exit log view. It will show head and below commits. (using android)
		//to see all commits
			git log --all (using android). It will show all commits including head.
		//revert commmit
			terminal -> git revert hash_code (commit you want to remove. eg- 4 hash will remove 4th commit)
			git -> select the commit you want to revert -> right click -> revert  (using android)
		//switch or checkout to particular commit
			terminal -> git checkout hash_code (commit you want to switch to. eg- 4 hash will switch to 4th commit)
			git -> select the commit you want to checkout -> right click -> checkout revision 'abcd' (using android)
		//yellow tag will show the current head
		//stash
			git stash -> to save local changes which you have not committed before you checkout to other commit. It will create local commit.
			git stash list -> to get list of stash in its current commit.
			git stash apply -> to apply the changes
			//Dont checkout to stash commit it will complicate things just get data using "stash list"
			easier method
			vcs -> git -> Stash Changes -> stash_name -- to stash local changes
			vcs -> git -> UnStash Changes -> select the required stash -- to unstash local changes
			
//branching git
	//you can use this to create diff versions of your project and it will have its own seperate commits
	//git branch -> it will show a list of branches
	//git checkout feature -> you can use this to switch between branches where feature is the branch name
	//git checkout -b non-existing-branch -> switched to a new branch non-existing
	//git branch -d localBranchName -> delete branch locally
	//git push origin --delete remoteBranchName -> delete branch remotely
	//git fetch -p -> The -p flag means "prune". After fetching, branches which no longer exist on the remote will be deleted.
			
//android git
	//remove buggy local code
		//select latest commit -> Reset current branch to here -> Hard -> all local changes will be lost

//pull code from github
	//merge remote changes to local
		git pull 'remote_name' 'branch_name'
		//it is useful for readme files error or someone else made changes to remote repo
	shortcut
		//shift+home - home
		//shift+end - end
		//ctrl+l - clear screen
		//shift + insert -  to copy commands in bash
		
		
	
	ref - https://www.datacamp.com/community/tutorials/git-push-pull
	
//fonts
	https://fonts.google.com/
	search font.ttf
	android:font="@fonts/custom.ttf"
	

//custom toolbar
	https://youtu.be/e5_C9e_gKOM

//redo
	ctrl+shift+z
	
//to find recruiters
	company_name recruiter on linkedin
	find maild id and send resume
	
//animations
	button or icon animation
	ref - 
	https://youtu.be/ALj2KO7CAqM
	Web App: https://shapeshifter.design/
	Project: https://github.com/alexjlockwood/ShapeShifter
	
//APi 
	SimpleApi
	Repository
	MainViewModel
	//parsing
		edit post class to receive data
		convert response from class to string 
		ref - https://medium.com/@hissain.khan/parsing-with-google-gson-library-in-android-kotlin-7920e26f5520
		to access nested data
		val user: ArrayList<User>
		to get nested data value
			iterate json array
			ref - https://stackoverflow.com/questions/17441246/org-json-jsonarray-cannot-be-converted-to-jsonobject
	//data change
		change the data class for that particular object only , no need to recreate data classes for all json objects
		eg - if new variable is added in User object, change only User data class
	//always use json class to kotlin to generate data class
	//post request
		match post rqst variable before sending post request otherwise validation error will come
	//to check api
		use postman and save diff urls, you can also group urls based on project.
	
	//response
		//response successfull
		//use function to perform operations if the response is successful for cleaner code
		
	//Note Api
		//we cannot call api(viewmodel) from service class. viewmodel is closely associated with lifecycle of activity and can be called from activity only.
			
//MQTT
	add libraries
	add connect,publish,subscribe
	add permissions in manifest
	makes changes in application tab in manifest
	
	
//drawable
	copy asset by creating a folder and pasting in res folder
	
//swipe view
	use viewpager2 to create swipe views
	ref - https://youtu.be/COZ3j8Dwlog
	
//Http request
	add android:usesCleartextTraffic="true" inside application tag to read data
	
	
//Delay
	Handler(Looper.getMainLooper()).postDelayed({
      //Do something after 100ms
    }, 100)
    
//Singleton
	to access same variable and functions across different activities
			
		
//Fullscreen Mode
	override fun onCreate(savedInstanceState: Bundle?) {
    requestWindowFeature(Window.FEATURE_NO_TITLE)
    super.onCreate(savedInstanceState)     
    window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
            WindowManager.LayoutParams.FLAG_FULLSCREEN)
   setContentView(R.layout.activity_test_test)
   }
   ref  - https://stackoverflow.com/questions/45408167/how-to-create-the-activity-full-screen-in-android-programmatically-using-kotlin/45408235
   
//Activity lifecycle
	//when activity is visible
		onCreate	called when activity is first created.
		onStart		called when activity is becoming visible to the user.
		onResume	called when activity will start interacting with the user.
	//when activity is stopped
		onPause		called when activity is not visible to the user.
		onStop		called when activity is no longer visible to the user.
	//when activity is again visible
		onRestart	called after your activity is stopped, prior to start.
	//when app is closed
		onDestroy	called before the activity is destroyed.
	//Todo
		Detail explanation
		
//Fragment lifecycle
	//Todo
		Detail explanation
//Services
	ref - https://youtu.be/EwwB_wZhBaw
	//intent
	val intent1 = Intent(this@MyService, ApiActivity::class.java)
                        intent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                        this@MyService.startActivity(intent1)
			
	Keeps running once started only stop manually or when app is killed
	//Intent service
		runs automatically in sepearate thread not able to do multi-threading
	//Service
		runs in the main thread, manually specify seperate thread, able to do multi-threading
		//sepearate thread
			 Thread{
			}.start()
			
	//Services
	ref - https://www.tutorialspoint.com/how-to-run-an-android-service-always-in-the-background-using-kotlin
	//foreground services
		//if you want to run something even if the app is closed
	ref - https://androidwave.com/foreground-service-android-example-in-kotlin/
			
//java to kotlin code
	code -> convert java to kotlin code
	
//rename variable
	select variable -> refractor -> rename

//location of files github

//gradle location github
	//project level
		outside -> build.gradle
	//module level
		app -> build.gradle
		
//layout location github 
	//DataStoreAndroid/app/src/main/res/layout/activity_main.xml
	
//Activity location github 
	//DataStoreAndroid/app/src/main/java/com/plcoding/datastoreandroid/MainActivity.kt
	
//common location
	//DataStoreAndroid/app/src/main/
		//java - Activity
		//res - layout
		//AndroidManifest.xml

		
//view binding
	Module gradle
	 defaultConfig {
	 	...
	 }
	 buildFeatures {
        	viewBinding true
    		}
		
	MainActivity
		private lateinit var binding: ActivityMainBinding // every layout file will have its own binding class
		oncreate{
		 	binding = ActivityMainBinding.inflate(layoutInflater)	//replace setContentView(R.layout.activity_main) with these two lines
        		setContentView(binding.root)
	
			binding.btnShowSnackbar.setOnClickListener {
            		...
        		}
		}
	//for fragment
		class SampleFragment : Fragment(R.layout.fragment_sample)
		private lateinit var binding: FragmentSampleBinding
		binding = FragmentSampleBinding.bind(view)
        	binding.tvFrag.text = "Chandra"
		
//data binding
	//plugin
		//id 'kotlin-kapt'
	Module gradle
	 defaultConfig {
	 	...
	 }
	 buildFeatures {
        	dataBinding true
    		}
	//use
		/*
		<layout
    		xmlns:android="http://schemas.android.com/apk/res/android"
    		xmlns:app="http://schemas.android.com/apk/res-auto"
    		xmlns:tools="http://schemas.android.com/tools"
    		> 
		<data>
        		<variable
            		name="myViewModel"
            		type="com.eegrab.roomdemo.SubscriberViewModel" />
    		</data>
		//xml code
		<Button
		    android:id="@+id/btnSaveUpdate"
		    android:layout_width="wrap_content"
		    android:layout_height="wrap_content"
		    android:text="@={myViewModel.saveOrUpdateButtonText}"
		    android:onClick="@{()->myViewModel.saveOrUpdate()}"  
		    android:textSize="18sp"
		    android:textStyle="bold"
		    android:layout_weight="1"
           	 />
		</layout>
		*/
	//MainActivity
		private lateinit var binding: ActivityMainBinding
		onCreate{
			setContentView(R.layout.activity_main)
        		binding = DataBindingUtil.setContentView(this,R.layout.activity_main)
		}
//ViewModel
	/* 
	class SubscriberViewModel(private val repository: SubscriberRepository): ViewModel() {
		@Bindable
		val inputName = MutableLiveData<String>()
		@Bindable
		val inputEmail = MutableLiveData<String>()
		
		init {
		saveOrUpdateButtonText.value = "Save"
		clearAllOrDeleteButtonText.value = "Clear All"
    			}
		
		fun saveOrUpdate(){

    		}
	}
	*/
//Scope Functions		
//Elvis Operator
	When we have a nullable reference b, we can say "if b is not null, use it, otherwise use some non-null value":
	val l: Int = if (b != null) b.length else -1
	val l = b?.length ?: -1
	
//Also
	fun getSquaredI() = (i*i).also {
        i++
    } 
    //it will increase i value also and if used (it) it will increase (i*i) value
    
//Let 
	It is equivalent to also
    
//Apply
	val intent = Intent().apply {
            putExtra("","")
            putExtra("",0)
            action = ""
        }
	it will return intent object with all below functions. You can use it to start new activity. It will serve as intent class and you can access
	every function of it.
	
//Run 
	It is equivalent to apply it will return the last line eg -  (action = "") or (this) to return intent
	
//With
	It is equivalent to run
	with(Intent()) {
	..
	}
	
//to add webview to app
webView.settings.javaScriptEnabled = true
        webView.settings.domStorageEnabled = true
        webView.webViewClient = object : WebViewClient() { -- to open webview inside app
        override fun shouldOverrideUrlLoading(view: WebView, url: String?): Boolean {
            view.loadUrl("https://abcd.com")
            return true
        }

//            fun onPageFinished(view: WebView?, url: String?) {
//            }
        }
	webView.destroy()
        webView.removeAllViews()
        webView.clearCache(true)
        webView.clearHistory()
        webView.clearView()
        webView.loadUrl("https://abcd.com") 
	
	
        webView.clearView()  -- most important to add before you load new url
        webView.loadUrl("https://abcd.com") -- to open webview outside app

//debug code
	timestamp = Timestamp(System.currentTimeMillis())
        Log.d(MainActivity.Singleton.TAG, "api is called" + timestamp)
	
//change background on buttonclick
	 twoBtn.setOnClickListener {
            twoBtn.setBackgroundResource(R.drawable.ic_selected)
        }
    
//to remove ssl error in retrofit
	Retrofit.Builder()
                .baseUrl(BASE_URL)
                .client(getUnsafeOkHttpClient()?.build())
                .addConverterFactory(GsonConverterFactory.create())
                .build()
		
	 fun getUnsafeOkHttpClient(): OkHttpClient.Builder? {
        return try {
            // Create a trust manager that does not validate certificate chains
            val trustAllCerts = arrayOf<TrustManager>(
                    object : X509TrustManager {
                        @Throws(CertificateException::class)
                        override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {
                        }

                        @Throws(CertificateException::class)
                        override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {
                        }

                        override fun getAcceptedIssuers(): Array<X509Certificate> {
                            return arrayOf()
                        }
                    }
            )

            // Install the all-trusting trust manager
            val sslContext = SSLContext.getInstance("SSL")
            sslContext.init(null, trustAllCerts, SecureRandom())

            // Create an ssl socket factory with our all-trusting manager
            val sslSocketFactory = sslContext.socketFactory
            val builder = OkHttpClient.Builder()

            builder.sslSocketFactory(sslSocketFactory, trustAllCerts[0] as X509TrustManager)
            builder.hostnameVerifier(HostnameVerifier { hostname, session -> true })
            builder
        } catch (e: Exception) {
            throw RuntimeException(e)
        }
    }
    
    ref - https://mobikul.com/android-retrofit-handling-sslhandshakeexception/
	
//to protect eyes
	install flux and set current location
		
//disable onclick
	oneBtn.isEnabled = false

//Spinner
	//set default spinner position
		val spinnerPosition: Int = adapter.getPosition("text")
		spinner.setSelection(spinnerPosition)
	//to set entries
		android:entries="@array/currency_codes"
//Visibility
	visible -- view will be visible and user will not be able to interact
	invisible -- view will be invisible and user will not be able to interact
	gone -- view will be invisible and the space will also be removed
	constraintLayoutKeysSignIn.isVisible = false -- to set visibility
	
//editText
	//disable special characters
		android:digits="abcde.....012345789"
	//to get text
		ritm = etRitmKeys.text.toString()
	//to set text
		etRitmKeys.setText(ritm)
		
//modern editText
	/*
	<com.google.android.material.textfield.TextInputLayout
        android:id="@+id/tilFrom"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox.Dense"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:hint="Amount"
        android:layout_marginEnd="16dp"
        app:layout_constraintBottom_toBottomOf="@+id/spFromCurrency"
        app:layout_constraintEnd_toStartOf="@+id/spFromCurrency"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="@+id/spFromCurrency">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/etFrom"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:inputType="numberDecimal" />
    </com.google.android.material.textfield.TextInputLayout>
    */
    
    
    
//pass views as parameter
	//just name the function and pass the view. It will generate the code automatically
	private fun changeView(view: TextView) {
        if (view.text in keysList) {
            view.setBackgroundResource(R.drawable.ic_available)
        }
        else {           
            view.setBackgroundResource(R.drawable.ic_selected)
        }       
    }

//type
	val obj: Double = 5.0
	System.out.println(obj.javaClass.name)                 // double
	System.out.println(obj.javaClass.kotlin)               // class kotlin.Double
	System.out.println(obj.javaClass.kotlin.qualifiedName) // kotlin.Double
	
//flowchart
	https://app.creately.com/diagram/ZKvvxZLiEHb/edit	//paid better UI
	https://cloud.smartdraw.com/editor.aspx?templateId=490dad73-de30-42bf-9a58-1789d56c1afd&flags=128#depoId=25165452&credID=-33813377	//free
	
//click effect for btn
	android:clickable="true"
    android:focusable="true"
    
//recyclerview  
	//to create recyclerview
		ref - https://youtu.be/UCddGYMQJCo
		ref - https://medium.com/@aayushpuranik/recycler-view-using-kotlin-with-click-listener-46e7884eaf59 -- to implement onclick in base activity
	//efficient onclick
		you can simplify it further by calling function inside ViewHolder class and passing view and position to it
		keyCollectionRequest(itemView,position)
	//more efficient way is using higher order function of kotlin
	adapter = RecyclerNewAdapter(this)
        rv_recyclerView.adapter = adapter
	//Kotlin - RecyclerView List Data From JSON API
	ref - https://youtu.be/rBQi_7L-Uc8
	
	ref - https://www.tutorialspoint.com/working-with-recyclerview-in-an-android-app-using-kotlin
	//to add click 
	//inside onBindViewHolder
	holder.movieLayout.setOnClickListener {
            Toast.makeText(holder.title.context,"title is "+movie.getTitle(),Toast.LENGTH_SHORT).show()
        }

    
	//how to change recyclerview to gridview
		private var gridLayoutManager: GridLayoutManager?= null
		gridLayoutManager = GridLayoutManager(applicationContext,3, LinearLayoutManager.VERTICAL,false)
        	rv_recyclerView?.layoutManager = gridLayoutManager
		//just change the layout manager of recyclerview
	 
	//preview
		<androidx.recyclerview.widget.RecyclerView
		tools:listitem="@layout/example_item"
		/>
		
	//RecyclerView Intent
		val context=holder.title.context
		val intent = Intent( context, EventDetail::class.java)
		context.startActivity(intent)
		ref - https://stackoverflow.com/questions/59012821/android-kotlin-new-intent-on-click-event-from-recycler-view		
		
	//intent for recycler view adapter
		ref - https://stackoverflow.com/questions/59012821/android-kotlin-new-intent-on-click-event-from-recycler-view		
		
	//update data
		//Use DiffUtil to Improve RecyclerView's Performance 
		//It will only update data which has changed, it will not update the entire list
		//It will also check duplicate data and will not allow entry of duplicate data
		
	//populate recyclerview with retrofit response
		//response.body()?.let {  myAdapter.setData(it)	}

//cardview
	//round
		android:layout_width="100dp"
        	android:layout_height="100dp"
	//background
		ref - https://stackoverflow.com/questions/27299291/drawable-as-background-for-cardview
	//click effect
		android:clickable="true"
        	android:focusable="true"
	//attribute
		app:cardBackgroundColor="@color/design_default_color_primary"
        	app:cardCornerRadius="10dp"
		app:cardElevation="10dp"
//appname
	//change appname
		//change label in application tag in manifest
		android:label="@string/app_name"

//Listener
	//Todo
		Detail explanation

	
//Constraint layout
	//to remove constraint
		select view -> right click remove constraint for that view
		whole view -> toolbar -> clear all constraints -> it will remove constraints of all the views
		
		ctrl + select respective constraint - It will remove that particular constraint
		
	//to spread view equally to occupy screen
		select two view atleast -> right click -> chains -> create horizontal or vertical chains
	//to select multiple views
		use mouse and select all views in design tab
	//alignment
		//it will align views according to constraints given
		//eg -  app:layout_constraintStart_toStartOf="@+id/spFromCurrency" //here base view start will aligned to start of destination view
		// app:layout_constraintBottom_toBottomOf="@+id/btnConvert"   //here base view bottom will only be aligned to bottom of destination view
		//if you add app:layout_constraintTop_toTopOf="@+id/btnConvert" then base view top will only be aligned to top of destination view and base view will be
		//in center of destination view
		
//Guideline
	//you can use it to align views on screen 
	//eg - guideline1 - 35%
	//guideline2 - 65%
	//views will be between these guidelines		
	//It is very powerful concept
	//just constraint views to guideline eg - using constraint layout and you
	//can shift guideline up or down (horizontally) or left or right (vertically) and all the views constrained to guideline will also be shifted

		
	
//productive apps
	//mobile
		To do List
	//web
		https://app.asana.com/
	
//TextView
	//Change text color of one word in a TextView
		val first = "Welcome "
		val next = "<font color='#EE0000'>Abhinesh Chandra</font>"
		textView2Choice.setText(Html.fromHtml(first + next))
		ref - https://stackoverflow.com/questions/7221930/change-text-color-of-one-word-in-a-textview
	//to adjust text within textview dimension
		android:autoSizeTextType="uniform"
	//code
		android:textStyle="bold"  // to change text style
		android:textColor="@color/black" //to change text color
	//attribute
		android:textSize="30sp"
	
//project name 
	//Change project name on Android Studio
		If your settings.gradle contains the below line, either delete it or update it to the new name.
		rootProject.name = 'Your project name'

//project structure
	create package with proper naming convention and place activities in respective folder
	
//back button
	//disable back button
	//override method and do nothing
	override fun onBackPressed() {
		//if (shouldAllowBack()) {
		//super.onBackPressed()			
		//} else {
		//doSomething()
		//}
    	}
	ref - https://stackoverflow.com/questions/4779954/disable-back-button-in-android
	
//alert dialog
	you can create a basic alert dialog with title, message, positive (yes), negative (no) views
	ref - https://www.youtube.com/watch?v=MMcfdEzfdB4
	   val builder = AlertDialog.Builder(this)
        builder.setTitle("Are you sure!")
        builder.setMessage("Do you want to close the app?")
        builder.setPositiveButton("Yes",{ dialogInterface: DialogInterface, i: Int ->
            finish()
        })
        builder.setNegativeButton("No",{ dialogInterface: DialogInterface, i: Int -> })
	builder.setNeutralButton("Ok",{ dialogInterface: DialogInterface, i: Int -> })
        builder.show()
	 val alert = builder.create()
        Handler(Looper.getMainLooper()).postDelayed({
            //Do something after 100ms
            alert.dismiss() 		--> to dismiss dialog ater few seconds
        }, 3000)
        alert.show()
	you can also create custom alert dialog with checkbox, edit text and buttons
	ref - https://www.youtube.com/watch?v=PqRp3-t9GPM
	
//timer
	val timer1 = object: CountDownTimer(5000, 1000) {	//declare it as global variable
        override fun onTick(millisUntilFinished: Long) {
            Log.d(TAG, "timer is running")
        }
        override fun onFinish() {
            Log.d(TAG, "timer finished")
        }
    	}
	timer1.cancel()  //to cancel previous run		//call this inside function
        timer1.start()	//to start new run
	//to show timer
		//use a textview to display timer and update its value	
		var min = millisUntilFinished / 1000 / 60
            	var secs = millisUntilFinished / 1000
            	Log.d(TAG, "time remaining is $min : $secs")
//loop  
	val mainHandler = Handler(Looper.getMainLooper())
                            mainHandler.post(object : Runnable {	//to run anything in loop after every 1 sec
                                override fun run() {   
					//run anything here
                                    mainHandler.postDelayed(this, 1000)
                                }
                            })
//Notification
	ref - https://www.tutorialspoint.com/how-to-create-a-notification-alert-using-kotlin
	
//to check build version
	if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { } //it will check for oreo version(O)
	
//views and layout
	you change any view or layout to different types
	change default text view to other type for faster development
	
//Receiver 
	//declare Receiver in manifest
	 <receiver android:name=".MainActivity$Receiver" />
    	</application>
	
//AlarmManager	
	//to do some task at a paticular time
	ref - https://youtu.be/rzxgQOo2ZF4
	alarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + second,pendingIntent)
	set method is enough to get data at exact time
	setExact method throws error
	
//TODO
	//it is useful for writing function you want to implement later
	private fun checkLoggedInState() {
        TODO("Not yet implemented")
    	}
	
//null check for functions
	auth.currentUser?.let {
        }
//Firebase
	//connectivity
		tools -> Firebase -> Authentication -> Email & password authentication -> connect your app to firebase 
		//just follow the steps afer that & your app will be connected
	//add firebase authentication
		tools -> Firebase -> Authentication -> Email & password authentication -> add firebase authentication
		//just accept changes and authentication will be added
		ref - https://youtu.be/xu3bHQWD6A0
		//add coroutines dependencies from above for effectiveness
		//email
			//enable email 
			//enable email(passwordless) -> doesnt required password, link will be sent to the email
	//calling diff firebase function
		//its easy:)
		//create instance of firebase
			auth = FirebaseAuth.getInstance()
		//call diff methods on auth
			eg - auth.createUserWithEmailAndPassword(email,password).await() //to create user with email && password
				auth.signInWithEmailAndPassword(email,password).await() //to login user with email && password
				auth.signOut() //to sign out user
	//google sign in
		//add coroutines dependency from above
		//google sign in dependency
		
//Coroutines
	//def
	Its like multithreading but it can do so much better than multithreading
	You can start task in diff thread other than main thread
	Once the app is closed the coroutines threads will also close
	//call
		add coroutines dependencies
		GlobalScope.launch {
            	delay(3000L)	//it is used to delay the coroutines call
            	Log.d(TAG, "Coroutine says hello from thread ${Thread.currentThread().name}")
        	}
	//context
		//context Notes - we are only allowed to change UI in Main Dispatchers
		//Dispatchers type
			//Dispatchers.Main, IO, Default, Unconfined
	It is used to run coroutines in diff threads by switching between them
	/* GlobalScope.launch(Dispatchers.IO) {	//to run in worker thread
            Log.d(TAG, "Starting coroutine in thread ${Thread.currentThread().name}")	//Starting coroutine in thread DefaultDispatcher-worker-2
            val answer = doNetworkCall()
            withContext(Dispatchers.Main)  {    //to switch back to main thread
                Log.d(TAG, "Setting text in thread ${Thread.currentThread().name}")	//Setting text in thread main
                tvDummy.text = answer
            }
        } */
	//runBlocking //it will run on main thread and will block main thread
	/* Log.d(TAG, "Before runblocking")
        runBlocking {
            Log.d(TAG, "Start of runblocking")
            launch {	//it can be used to launch one or more coroutines inside coroutine
                delay(3000L)
                Log.d(TAG, "finished coroutine 1")
            }
            launch {
                delay(3000L)
                Log.d(TAG, "finished coroutine 2")
            }
            delay(5000L)
            Log.d(TAG, "End of runblocking")
        }
        Log.d(TAG, "After runblocking") */
	//types
		//Dispatchers.Main, Default, IO, unconfined // it refers to diff types of threads
	//Coroutines jobs
	val job = GlobalScope.launch(Dispatchers.Default) {		//it will return job
                repeat(5) {	//it will repeat for five times
                    Log.d(TAG, "Coroutine is still working...")
                    delay(1000L)
                }
        }
	runBlocking {
            job.join()	//it will block the main thread until the job is finished then continue
	    job.cancel() //it is used to cancel job
            Log.d(TAG, "Main Thread is continuing...")
        }
	//output
	Coroutine is still working...
	2021-02-25 11:34:06.454 10665-10732/com.eegrab.coroutineexample D/MainActivity: Coroutine is still working...
	2021-02-25 11:34:07.457 10665-10732/com.eegrab.coroutineexample D/MainActivity: Coroutine is still working...
	2021-02-25 11:34:08.459 10665-10732/com.eegrab.coroutineexample D/MainActivity: Coroutine is still working...
	2021-02-25 11:34:09.462 10665-10732/com.eegrab.coroutineexample D/MainActivity: Coroutine is still working...
	2021-02-25 11:34:10.466 10665-10665/com.eegrab.coroutineexample D/MainActivity: Main Thread is continuing...
	//cancel
		 if (isActive) {  //if some job is not getting cancelled with job.cancel() add instructions inside isActive then call job.cancel()
                        //some action
                    }
		/* val job = GlobalScope.launch(Dispatchers.Default) {
            		Log.d(TAG, "Starting long running process")
            		withTimeout(3000L) {	//it will automatically cancel the job after 3 secs
                	for (i in 30..40) {
                    	if (isActive) {
                        Log.d(TAG, "i is $i")
                        delay(1000L)
                    	}
                	}
            	}
            	Log.d(TAG, "Ending long running process")
        	} */
		//output /*
		Starting long running process
		i is 30
		2021-02-25 12:12:45.067 11840-11910/com.eegrab.coroutineexample D/MainActivity: i is 31
		2021-02-25 12:12:46.069 11840-11910/com.eegrab.coroutineexample D/MainActivity: i is 32
		*/
	//Async and Await
		/* GlobalScope.launch(Dispatchers.IO) {
            	val time = measureTimeMillis {
                var answer1: String? = null	//it will declare nullable variable
                var answer2: String? = null
                val job1 = launch { answer1 = networkCall1()  } //it will launch new coroutine inside coroutine at same time
                val job2 = launch { answer2 = networkCall2()  }//it will launch new second coroutine inside coroutine at same time
                job1.join()	//it will wait for first coroutine to finish
                job2.join()	//it will wait for second coroutine to finish
                Log.d(TAG, "Answer1 is $answer1")
                Log.d(TAG, "Answer2 is $answer2")
            	}
            	Log.d(TAG, "Requests took ${time/1000} secs")
        	}
    		}

    		suspend fun networkCall1(): String  {
        	delay(3000L)
        	return "Answer 1"
    		}

    		suspend fun networkCall2(): String  {
        	delay(3000L)
        	return "Answer 2"
    		} */
		//output /* 
		Answer1 is Answer 1
		Answer2 is Answer 2
		Requests took 3 secs
		*/
		//best way
			/* GlobalScope.launch(Dispatchers.IO) {
            		val time = measureTimeMillis {
                	val answer1 = async { networkCall1() } //it will not return job but deffered string 
                	val answer2 = async { networkCall2() }	//async is used when coroutine return something, it is more efficient than launch
                	Log.d(TAG, "Answer1 is ${answer1.await()}")	//it will wait for value then print it
                	Log.d(TAG, "Answer2 is ${answer2.await()}")
            		}
            		Log.d(TAG, "Requests took ${time/1000} secs")
        		}  */
			//output /*
			Answer1 is Answer 1
			Answer2 is Answer 2
			Requests took 3 secs
			*/
	//lifecycleScope and viewModelScope
		/* tvDummy.setOnClickListener {
            	lifecycleScope.launch {	//it will destroy the coroutine once the activity is destroyed 	//viewModelScope.launch	//it is used for viewModel lifecycle
                while (true) {
                    delay(1000L)
                    Log.d(TAG, "Still running...")
                }
            	}
            	GlobalScope.launch { //it will keep on running coroutine even if the activity is destroyed
                delay(5000L)
                Intent(this@MainActivity, SecondActivity::class.java).also {
                    startActivity(it)
                    finish()	//it will destroy the resources of base activity
                }
            	}
        	} */
		//output // D/MainActivity: Still running...
	//Coroutines firebase
		//we can integrate firebase with coroutines
		/* data class Person(
 		   val name: String = "",
    		val age: Int = -1
		) 
		
		val tutorialDocument = Firebase.firestore.collection("coroutine")	//it will create object of firestore database
            	.document("tutorial")
       	 	val peter = Person("Peter",25)
        	GlobalScope.launch(Dispatchers.IO) {
            	delay(3000L)
            	tutorialDocument.set(peter).await()	//it will set the database with given data and wait for the process to complete
            	val person = tutorialDocument.get().await().toObject(Person::class.java)	//it will get the data from the database and wait for the process to complete
           	 withContext(Dispatchers.Main) {
                tvDummy.text = person.toString()
            	}
        	}
		
		*/
	
//wifi status
	https://johncodeos.com/how-to-check-for-internet-connection-in-android-using-kotlin/
//toggle button
		https://www.geeksforgeeks.org/togglebutton-in-kotlin/
//bluetooth
		//enable or disable 
		mBluetoothAdapter.enable()
		mBluetoothAdapter.disable()
		//permission
		<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
		
//UI
	//Orientation for preview (O)
	//UI mode
		//you can select diff modes like television,appliance, watch etc to check diff UI looks
	//Night Mode
		//you can select (Night) to see how UI will look in night mode
	//Customize layouts for diff screens sizes
		Orientation for preview (O) -> create other -> choose different qualifiers 
		eg - smallest screen width (smallest width for horizontal or vertical orientation)
		smallest screen width (720) && Screen Orientation (landscape) -> it will generate customize layout for tablets in landscape mode
		
//README
	//always update readme on remote and make a pull request to update local otherwise it will be alot of work
	//cheatsheet - https://github.com/tchapi/markdown-cheatsheet/blob/master/README.md
	
//Android Architecture Component
	//ViewModel 
	//ViewModelFactory
	//LiveData
	//ViewModel 
		//It is used to retain data on orientation change
		//Do not use it to store reference to view, activity etc
	//ViewModelFactory
		//It is used to pass arguments to viewmodel.
		//Both viewmodel & viewmodel factory is used in retrofit2
	//LiveData 
		//LiveData is a data holder. It is capable of being observed, it can hold any kind of data, and on top of that, it is also lifecycle-aware.
//Button
	//small text
		android:textAllCaps="false"

//Repository name
	settings.gradle -> rootProject.name = "CoroutineExample"
	
//time
	/* val time2 = measureTimeMillis {  	// it is used to measure execution time of code
            Log.d(TAG, "hello world")
        }
        Log.d(TAG, "request took ${time2/1000} secs") */
	//output 
	/* 2021-02-25 12:32:29.885 12459-12459/com.eegrab.coroutineexample D/MainActivity: hello world
	2021-02-25 12:32:29.885 12459-12459/com.eegrab.coroutineexample D/MainActivity: request took 0 secs
	*/
//NAVIGATION DRAWER
	//layout
		//DrawerLayout is important as root layout to create NAVIGATION DRAWER
//Menu
	//res -> New -> Android Resource file -> Resource type -> Menu
//Values
	//Strings
		//Single item
		//<string name="app_name">CurrencyConverter</string>
		//Multiple items
		/* <string-array name="currency_codes">
        	<item>CAD</item>
        	<item>EUR</item>
        	<item>HKD</item>
        	<item>ISK</item>
        	<item>PHP</item>
		</string-array> */

//Condition
	//to check multiple coditions
		//use multiple if blocks just make sure to sepearate them
		
//Partion drive
	//How to partition a hard drive in Windows 10, and keep your most important files separate from the rest
		//https://www.businessinsider.com/how-to-partition-a-hard-drive-in-windows-10?IR=T

//AndroidX
	//AndroidX dependencies issue
		//Android Studio 3.6.1 | Error: “This project uses AndroidX dependencies” [duplicate]
		//ref - https://stackoverflow.com/questions/60506895/android-studio-3-6-1-error-this-project-uses-androidx-dependencies
		//To enable jetifier, add those two lines to your gradle.properties file:
		/* android.useAndroidX=true
		android.enableJetifier=true */
		//you need to replace old libraries with new ones by taking reference from new project

//google-services.json
	//File google-services.json is missing.
	//just add firebase to your project

//Environment  variable
	//just type environment to set environment variables
	//eg - jdk path

//Jetpack Compose
	//https://youtu.be/OOCivMK1v3s?t=304


//Project Structure
	//Adapter -> It will contain all adapter files
	//api -> it will contain api call functions && data classes for diff api calls in their respective packages
	//repository -> it will contain the repository file
	//UiActivities -> it will contain all activities related to UI
	//util -> Constants -> this file will contain the base_url for api calls
	//ViewModel -> it will contain viewmodel files for api calls 

//app icon
	//choose image
	//remove background , ref - https://www.remove.bg/upload
	//generate icon , ref - https://romannurik.github.io/AndroidAssetStudio/icons-	launcher.html#foreground.type=image&foreground.space.trim=1&foreground.space.pad=0.25&foreColor=rgba(255%2C%20255%2C%20255%2C%200)&backColor=rgb(255%2C%20255%2C%20255)&crop=0&backgroundShape=circle&effects=none&name=ic_launcher
	//copy files in res folder
	//change manifest file
	/* android:icon="@mipmap/ic_accenture"
	android:roundIcon="@mipmap/ic_accenture" */

//Function
	//global function
	/* fun setData() {
       	...
    	} */
	//you can declare this function and call this function from anywhere in the project	

//Keyboard shortcut
	//tab - make selection and press tab, It will move the entire section by tab space backwards
	//shift + tab - It will move the entire section by tab space forward
	//F2 - It will rename file
	//ctrl + shift + N - It will create new folder
	//ctrl + g - To go to particular line

//android dev challenge
	//ref - https://developer.android.com/dev-challenge?authuser=1#the-latest-challenge

//Eeegrab email ids
	//sanchaita@eegrab.com; kc@eegrab.com; pritam.s@eegrab.com; rohan.s@eegrab.com

//Difference between activity && fragment

	//activity - An Activity is an application component that provides a screen, with which users can interact in order to do something. 
	
	//fragment - Whereas a Fragment represents a behavior or a portion of user interface in an Activity.
	
	//Advantages of fragment
		//The main reason to use Fragments are for the backstack and lifecycle features.
		//Where I ran into trouble was with the back button and life cycle. Since I was simply updating views manually...there was nothing keeping track of the history 
		of views and their states. Therefore, the back button did not work as expected and it was difficult to recreate even the latest state during life cycle events, 
		such as when rotating the app. To fix that, I had to wrap my custom views in fragments and use the FragmentManager so that the previous states would be saved and recreated.
	
	ref - https://stackoverflow.com/questions/25822656/what-are-the-differences-between-activity-and-fragment
	
//Difference between ANR and crash in Android

	//ANR (Application Not Responding.) - An ANR will occur if you are running a process on the UI thread which takes a long time, usually around 5 seconds. During this 
	time the GUI (Graphical User Interface) will lock up which will result in anything the user presses will not be actioned. After the 5 seconds approx has occurred, if 
	the thread still hasn't recovered then an ANR dialogue box is shown informing the user that the application is not responding and will give the user the choice to 
	either wait, in the hope that the app will eventually recover, or to force close the app.
	
	//Crash - A crash is when an exception within the app has been thrown which has not been handled. For example, if you try to set the text of an EditText component, but 
	the EditText is null and there is no try catch statement to catch the exception then your app will crash and will be force closed. The user will not see what caused the 
	crash, they will be shown a dialogue telling that the app has force closed unexpectedly and will give them the option to send a bug report. In this example if you were 
	to look in the bug report you would see the error caused by java.lang.NullPointerException.
	
	ref - https://stackoverflow.com/questions/20213482/what-is-the-difference-between-anr-and-crash-in-android/20213896
	
//Dependency Version
	//'junit:junit:4.+' just replace + with random 3 digit nos eg 1.1.0 
	//implementation 'org.tensorflow:tensorflow-lite:2.4.0'
	
//Facial Recognition
	//course - https://www.udemy.com/course/image-recognition-in-android-one-hour-bootcamp-kotlin/learn/lecture/25078820#overview
	//software - https://teachablemachine.withgoogle.com/train
	//repo
		//for image classification from gallery
		https://github.com/hamza372/ImageclassificationKotlinStarter 
		//for image classification from live feed
		https://github.com/hamza372/LiveFeedImageClassificationKotlin
	//dependency - implementation 'org.tensorflow:tensorflow-lite:2.4.0'
	//app level gradle file
		// kotlinOptions {
        	jvmTarget = '1.8'
    		}
    		aaptOptions{		//it will not compress the tflite file while loading in android
        	noCompress "tflite"
    		}
//MVVM
	//ref - https://youtu.be/v2yocpEcE_g?t=3731
	//architecture
	/*
		Activity or Fragment
		ViewModel  (LiveData3)
		Repository
		Model -> Room -> SQLite		Remote Data Source -> Retrofit -> Webservice 
