//topics
	//viewbinding
		//to bind views
		//efficient 
	//databinding
		//to bind views as well as their data
		//slows the system a bit
	//coroutines
		//it does everything what multithreading does and even more
		//Coroutine Contexts
//plugins
	//for referencing views
		id 'kotlin-android-extensions' 
	id 'kotlin-kapt'
	
	//works with navigation safe args dependency
		id 'androidx.navigation.safeargs.kotlin' 
	//dagger_hilt
		id 'kotlin-kapt'
    		id 'dagger.hilt.android.plugin'

//classpath
	classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.1"
	
	//dagger_hilt
		classpath "com.google.dagger:hilt-android-gradle-plugin:2.28.3-alpha"
	
//to hide actionbar
	supportActionBar?.hide()
//color
	//to pick color    https://material.io/design/color/the-color-system.html#tools-for-picking-colors  
//safe calls
	?. 
//Left alt+enter
	If alt+enter is not working
	
//Firebase console
	https://console.firebase.google.com/u/0/

//Google Api Services
	https://console.developers.google.com/ 

//Internet Permission
	<uses-permission android:name="android.permission.INTERNET" /> 
	
//maven repository
	maven {
	          url 'https://maven.google.com'
	        } 
	 maven { url 'https://jitpack.io' }
//google sign in android
	https://firebase.google.com/docs/auth/android/google-signin

//android studio keyboard shortcuts
	Ctrl+ I – to implement methods
	Ctrl+ O – to override functions
	Ctrl + B – To go to declaration
	Ctrl + D – To duplicate line
	Ctrl + Q - To know about function, type of variable
	Ctrl + P - To see parameters
	Alt + F7 - To find usages
	shift + F6 - to rename files
	tab - right-click -> close other tabs

//to generate constructors
	right-click -> generate -> secondary constructors
//Toast statement
	Toast.makeText(context,"Please enter all the information",Toast.LENGTH_SHORT).show()
	//to change toast on condition
	Toast.makeText(this, if(isChecked) "Geek Mode ON" else "Geek Mode OFF", Toast.LENGTH_SHORT).show()
	toast -> press enter to autocomplete
//Custom Toast	
Toast(this).apply {					
                duration = Toast.LENGTH_LONG		
this is a sample text				
                view = layoutInflater.inflate(R.layout.custom_toast,clToast)
                show()
            }
//SH1 certificate	   
	Gradle-Tasks-android-signingReport
//Intent
	val dashboardIntent = Intent(this, DashboardActivity::class.java)
	startActivity(dashboardIntent)
	//to disable back
	finish()
	Intent(this, ThirdActivity::class.java).also {
                startActivity(it)
            }
	//to pass value through intent
		it.putExtra("EXTRA_NAME",name)
	//to get value from intent
		val name = intent.getStringExtra("EXTRA_NAME")
	//to check null
		errorMsg = intent.getStringExtra("errorMsg") ?: "Invalid User"
//Initialize variable and assign value later		
	private lateinit var
//To build apk	
	Build-Generate Signed Bundle/apk
//to deploy apps	
	google play console
//To move views upwards while using keyboard	
	<activity android:name=".UiActivities.SignInCopy"
            android:windowSoftInputMode="stateVisible|adjustResize"	-- use inside manifest file activity
            />
//To stop views from moving upwards while using keyboard
	<activity android:name=".UiActivities.SignInCopy"
            android:windowSoftInputMode="adjustPan|adjustResize"	-- use inside manifest file activity
            />
//to set image	
	imageView2.setImageResource(bundle!!.getInt("image"))
//recycler view	
	implementation 'androidx.recyclerview:recyclerview:1.1.0'
//to display image from url	
	implementation 'com.squareup.picasso:picasso:2.71828'
//android networking library	
	implementation 'com.amitshekhar.android:android-networking:1.0.2'
//libraries
	//Dagger - Hilt
		implementation "com.google.dagger:hilt-android:2.28-alpha"
    		kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    		implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02"
    		kapt "androidx.hilt:hilt-compiler:1.0.0-alpha02"

	//Activity KTX for viewModels()
    		implementation "androidx.activity:activity-ktx:1.1.0"
	//google sign in 
    		implementation 'com.google.android.gms:play-services-auth:19.0.0'
	// Preferences DataStore
    		implementation "androidx.datastore:datastore-preferences:1.0.0-alpha04"
    
	//coroutines
		implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
		implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'
		implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'
		
	// Coroutine Lifecycle Scopes
    		implementation  'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    		implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"		
		

	//retrofit2
		implementation 'com.squareup.retrofit2:retrofit:2.9.0'
		implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
		implementation 'com.squareup.okhttp3:logging-interceptor:4.5.0'
		implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
	
	// Navigation Component
		implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
		implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'

    	// Room components
		implementation "androidx.room:room-runtime:2.2.5"
		kapt "androidx.room:room-compiler:2.2.5"
		implementation "androidx.room:room-ktx:2.2.5"
		androidTestImplementation "androidx.room:room-testing:2.2.5"

    	//Lifecycle components
		implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
		implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0"
		implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"

    	// Kotlin components
		implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.72"
		api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"
		api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5"
		
	// AnyChart components
		implementation 'com.github.AnyChart:AnyChart-Android:1.1.2'
		implementation 'com.android.support:multidex:1.0.3'
		multiDexEnabled true -- inside defaultConfig
		
	//ViewModel and LiveData
		implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    	//Recyclerview
    		implementation 'androidx.recyclerview:recyclerview:1.1.0'
	//CardView
		implementation "androidx.cardview:cardview:1.0.0"
	//Networking
		implementation 'com.amitshekhar.android:android-networking:1.0.2'

    	// Gson
		implementation "com.google.code.gson:gson:2.8.6"

    	// Glide
		implementation 'com.github.bumptech.glide:glide:4.11.0'

    	// Paging
		implementation "androidx.paging:paging-runtime:2.1.2"

    	//Rx
		implementation 'io.reactivex.rxjava2:rxjava:2.2.7'
		implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

//to print log msg
	Log.d("MyIntentService","Service is stopping...")
	
//for api calls
	sample APi or https://reqres.in/

//for viewing json on chrome
	json viewer chrome extensions 
//Kotlin Networking(for api calls)
	Retrofit, Volley 
	 
	ref - https://www.youtube.com/watch?v=sBCE_hOFnQU
//api list
	//cat-facts api
		https://alexwohlbruck.github.io/cat-facts/docs/
		
	//fake api - Free to use fake Online REST API for testing and prototyping
		https://jsonplaceholder.typicode.com/
		
	//Documentation and Test Consoles for Over 1400 Public APIs
		https://public-apis.io/
		
	//to generate fake api
		https://www.mockable.io/a/#/
	
		
//change actionbar name
	setupActionBarWithNavController(findNavController(R.id.fragment))
	
//for viewing error
	verbose - caused by or general error msg
	
//push code to github
	open git bash at desired location
	git init - to initialize the repository
	git add . - to add all the files to the given folder.
	git status - to view all the files which are going to be staged to the first commit.
	git commit -m 'first commit' - which adds the change to the local repository.
	The HTTPS or URL is copied from the given GitHub account, which is the place of the remote repository.
	git remote add origin 'your_url_name'
	git push -u origin master - used for pushing local content to GitHub.
	//to check origin
		git remote -v
	//git delete local repository 
		view tab -> show hidden files -> Delete the .git directory 
		ref - https://stackoverflow.com/questions/1514054/how-do-i-delete-a-local-repository-in-git
	//change remote url git
		git remote set-url origin "https://github.com/abhineshchandra1234/repository.git"
		https://github.com/abhineshchandra1234/repository.git
	
		//to see commit details.	
			git log -  Press "enter" to scroll. Press "q" to exit log view. It will show head and below commits. (using android)
		//to see all commits
			git log --all (using android). It will show all commits including head.
		//revert commmit
			terminal -> git revert hash_code (commit you want to remove. eg- 4 hash will remove 4th commit)
			git -> select the commit you want to revert -> right click -> revert  (using android)
		//switch or checkout to particular commit
			terminal -> git checkout hash_code (commit you want to switch to. eg- 4 hash will switch to 4th commit)
			git -> select the commit you want to checkout -> right click -> checkout revision 'abcd' (using android)
		//yellow tag will show the current head
		//stash
			git stash -> to save local changes which you have not committed before you checkout to other commit. It will create local commit.
			git stash list -> to get list of stash in its current commit.
			git stash apply -> to apply the changes
			//Dont checkout to stash commit it will complicate things just get data using "stash list"
			easier method
			vcs -> git -> Stash Changes -> stash_name -- to stash local changes
			vcs -> git -> UnStash Changes -> select the required stash -- to unstash local changes

//pull code from github
	//merge remote changes to local
		git pull 'remote_name' 'branch_name'
		//it is useful for readme files error or someone else made changes to remote repo
	shortcut
		//shift+home - home
		//shift+end - end
		//ctrl+l - clear screen
		//shift + insert -  to copy commands in bash
		
		
	
	ref - https://www.datacamp.com/community/tutorials/git-push-pull
	
//fonts
	https://fonts.google.com/
	search font.ttf
	android:font="@fonts/custom.ttf"
	

//custom toolbar
	https://youtu.be/e5_C9e_gKOM

//redo
	ctrl+shift+z
	
//to find recruiters
	company_name recruiter on linkedin
	find maild id and send resume
	
//animations
	button or icon animation
	ref - 
	https://youtu.be/ALj2KO7CAqM
	Web App: https://shapeshifter.design/
	Project: https://github.com/alexjlockwood/ShapeShifter
	
//APi 
	SimpleApi
	Repository
	MainViewModel
	//parsing
		edit post class to receive data
		convert response from class to string 
		ref - https://medium.com/@hissain.khan/parsing-with-google-gson-library-in-android-kotlin-7920e26f5520
		to access nested data
		val user: ArrayList<User>
		to get nested data value
			iterate json array
			ref - https://stackoverflow.com/questions/17441246/org-json-jsonarray-cannot-be-converted-to-jsonobject
	//data change
		change the data class for that particular object only , no need to recreate data classes for all json objects
		eg - if new variable is added in User object, change only User data class
	//always use json class to kotlin to generate data class
	//post request
		match post rqst variable before sending post request otherwise validation error will come
	//to check api
		use postman and save diff urls, you can also group urls based on project.
			
//MQTT
	add libraries
	add connect,publish,subscribe
	add permissions in manifest
	makes changes in application tab in manifest
	
	
//drawable
	copy asset by creating a folder and pasting in res folder
	
//swipe view
	use viewpager2 to create swipe views
	ref - https://youtu.be/COZ3j8Dwlog
	
//Http request
	add android:usesCleartextTraffic="true" inside application tag to read data
	
	
//Delay
	Handler(Looper.getMainLooper()).postDelayed({
      //Do something after 100ms
    }, 100)
    
//Singleton
	to access same variable and functions across different activities
			
		
//Fullscreen Mode
	override fun onCreate(savedInstanceState: Bundle?) {
    requestWindowFeature(Window.FEATURE_NO_TITLE)
    super.onCreate(savedInstanceState)     
    window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
            WindowManager.LayoutParams.FLAG_FULLSCREEN)
   setContentView(R.layout.activity_test_test)
   }
   ref  - https://stackoverflow.com/questions/45408167/how-to-create-the-activity-full-screen-in-android-programmatically-using-kotlin/45408235
   
//Activity lifecycle
	//when activity is visible
		onCreate	called when activity is first created.
		onStart		called when activity is becoming visible to the user.
		onResume	called when activity will start interacting with the user.
	//when activity is stopped
		onPause		called when activity is not visible to the user.
		onStop		called when activity is no longer visible to the user.
	//when activity is again visible
		onRestart	called after your activity is stopped, prior to start.
	//when app is closed
		onDestroy	called before the activity is destroyed.
	//Todo
		Detail explanation
		
//Fragment lifecycle
	//Todo
		Detail explanation
//Services
	ref - https://youtu.be/EwwB_wZhBaw
	Keeps running once started only stop manually or when app is killed
	//Intent service
		runs automatically in sepearate thread not able to do multi-threading
	//Service
		runs in the main thread, manually specify seperate thread, able to do multi-threading
		//sepearate thread
			 Thread{
			}.start()
			
	//Services
	ref - https://www.tutorialspoint.com/how-to-run-an-android-service-always-in-the-background-using-kotlin
	//foreground services
		//if you want to run something even if the app is closed
	ref - https://androidwave.com/foreground-service-android-example-in-kotlin/
			
//java to kotlin code
	code -> convert java to kotlin code
	
//rename variable
	select variable -> refractor -> rename

//location of files github

//gradle location github
	//project level
		outside -> build.gradle
	//module level
		app -> build.gradle
		
//layout location github 
	//DataStoreAndroid/app/src/main/res/layout/activity_main.xml
	
//Activity location github 
	//DataStoreAndroid/app/src/main/java/com/plcoding/datastoreandroid/MainActivity.kt
	
//common location
	//DataStoreAndroid/app/src/main/
		//java - Activity
		//res - layout
		//AndroidManifest.xml

		
//view binding
	Module gradle
	 defaultConfig {
	 	...
	 }
	 buildFeatures {
        	viewBinding true
    		}
		
	MainActivity
		private lateinit var binding: ActivityMainBinding // every layout file will have its own binding class
		oncreate{
		 	binding = ActivityMainBinding.inflate(layoutInflater)
        		setContentView(binding.root)
	
			binding.btnShowSnackbar.setOnClickListener {
            		...
        		}
		}
	//for fragment
		class SampleFragment : Fragment(R.layout.fragment_sample)
		private lateinit var binding: FragmentSampleBinding
		binding = FragmentSampleBinding.bind(view)
        	binding.tvFrag.text = "Chandra"
//Scope Functions		
//Elvis Operator
	When we have a nullable reference b, we can say "if b is not null, use it, otherwise use some non-null value":
	val l: Int = if (b != null) b.length else -1
	val l = b?.length ?: -1
	
//Also
	fun getSquaredI() = (i*i).also {
        i++
    } 
    //it will increase i value also and if used (it) it will increase (i*i) value
    
//Let 
	It is equivalent to also
    
//Apply
	val intent = Intent().apply {
            putExtra("","")
            putExtra("",0)
            action = ""
        }
	it will return intent object with all below functions. You can use it to start new activity. It will serve as intent class and you can access
	every function of it.
	
//Run 
	It is equivalent to apply it will return the last line eg -  (action = "") or (this) to return intent
	
//With
	It is equivalent to run
	with(Intent()) {
	..
	}
	
//to add webview to app
webView.settings.javaScriptEnabled = true
        webView.settings.domStorageEnabled = true
        webView.webViewClient = object : WebViewClient() { -- to open webview inside app
        override fun shouldOverrideUrlLoading(view: WebView, url: String?): Boolean {
            view.loadUrl("https://abcd.com")
            return true
        }

//            fun onPageFinished(view: WebView?, url: String?) {
//            }
        }
	webView.destroy()
        webView.removeAllViews()
        webView.clearCache(true)
        webView.clearHistory()
        webView.clearView()
        webView.loadUrl("https://abcd.com") 
	
	
        webView.clearView()  -- most important to add before you load new url
        webView.loadUrl("https://abcd.com") -- to open webview outside app

//debug code
	timestamp = Timestamp(System.currentTimeMillis())
        Log.d(MainActivity.Singleton.TAG, "api is called" + timestamp)
	
//change background on buttonclick
	 twoBtn.setOnClickListener {
            twoBtn.setBackgroundResource(R.drawable.ic_selected)
        }
    
//to remove ssl error in retrofit
	Retrofit.Builder()
                .baseUrl(BASE_URL)
                .client(getUnsafeOkHttpClient()?.build())
                .addConverterFactory(GsonConverterFactory.create())
                .build()
		
	 fun getUnsafeOkHttpClient(): OkHttpClient.Builder? {
        return try {
            // Create a trust manager that does not validate certificate chains
            val trustAllCerts = arrayOf<TrustManager>(
                    object : X509TrustManager {
                        @Throws(CertificateException::class)
                        override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {
                        }

                        @Throws(CertificateException::class)
                        override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {
                        }

                        override fun getAcceptedIssuers(): Array<X509Certificate> {
                            return arrayOf()
                        }
                    }
            )

            // Install the all-trusting trust manager
            val sslContext = SSLContext.getInstance("SSL")
            sslContext.init(null, trustAllCerts, SecureRandom())

            // Create an ssl socket factory with our all-trusting manager
            val sslSocketFactory = sslContext.socketFactory
            val builder = OkHttpClient.Builder()

            builder.sslSocketFactory(sslSocketFactory, trustAllCerts[0] as X509TrustManager)
            builder.hostnameVerifier(HostnameVerifier { hostname, session -> true })
            builder
        } catch (e: Exception) {
            throw RuntimeException(e)
        }
    }
    
    ref - https://mobikul.com/android-retrofit-handling-sslhandshakeexception/
	
//to protect eyes
	install flux and set current location
	
//to adjust text within textview dimension
	android:autoSizeTextType="uniform"
	
//disable onclick
	oneBtn.isEnabled = false
	
//set default spinner position
	val spinnerPosition: Int = adapter.getPosition("text")
	spinner.setSelection(spinnerPosition)
	
//Visibility
	visible -- view will be visible and user will not be able to interact
	invisible -- view will be invisible and user will not be able to interact
	gone -- view will be invisible and the space will also be removed
	constraintLayoutKeysSignIn.isVisible = false -- to set visibility
	
//editText
	//disable special characters
		android:digits="abcde.....012345789"
	//to get text
		ritm = etRitmKeys.text.toString()
	//to set text
		etRitmKeys.setText(ritm)
		
//pass views as parameter
	//just name the function and pass the view. It will generate the code automatically
	private fun changeView(view: TextView) {
        if (view.text in keysList) {
            view.setBackgroundResource(R.drawable.ic_available)
        }
        else {           
            view.setBackgroundResource(R.drawable.ic_selected)
        }       
    }

//type
	val obj: Double = 5.0
	System.out.println(obj.javaClass.name)                 // double
	System.out.println(obj.javaClass.kotlin)               // class kotlin.Double
	System.out.println(obj.javaClass.kotlin.qualifiedName) // kotlin.Double
	
//flowchart
	https://app.creately.com/diagram/ZKvvxZLiEHb/edit
	
//click effect for btn
	android:clickable="true"
    android:focusable="true"
    
//to create recyclerview
	ref - https://youtu.be/UCddGYMQJCo
	ref - https://medium.com/@aayushpuranik/recycler-view-using-kotlin-with-click-listener-46e7884eaf59 -- to implement onclick in base activity
	//efficient onclick
		you can simplify it further by calling function inside ViewHolder class and passing view and position to it
		keyCollectionRequest(itemView,position)
	//more efficient way is using higher order function of kotlin
	adapter = RecyclerNewAdapter(this)
        rv_recyclerView.adapter = adapter
	//Kotlin - RecyclerView List Data From JSON API
	ref - https://youtu.be/rBQi_7L-Uc8
	
	ref - https://www.tutorialspoint.com/working-with-recyclerview-in-an-android-app-using-kotlin
	//to add click 
	//inside onBindViewHolder
	holder.movieLayout.setOnClickListener {
            Toast.makeText(holder.title.context,"title is "+movie.getTitle(),Toast.LENGTH_SHORT).show()
        }

    
//how to change recyclerview to gridview
	private var gridLayoutManager: GridLayoutManager?= null
	gridLayoutManager = GridLayoutManager(applicationContext,3, LinearLayoutManager.VERTICAL,false)
        rv_recyclerView?.layoutManager = gridLayoutManager
	//just change the layout manager of recyclerview
	
//recyclerview 
	//preview
		<androidx.recyclerview.widget.RecyclerView
		tools:listitem="@layout/example_item"
		/>
	
//cardview
	//round
		android:layout_width="100dp"
        	android:layout_height="100dp"
	//background
		ref - https://stackoverflow.com/questions/27299291/drawable-as-background-for-cardview
//appname
	//change appname
		//change label in application tag in manifest
		android:label="@string/app_name"
//intent for recycler view adapter
	ref - https://stackoverflow.com/questions/59012821/android-kotlin-new-intent-on-click-event-from-recycler-view
//Listener
	//Todo
		Detail explanation
//RecyclerView Intent
	val context=holder.title.context
	val intent = Intent( context, EventDetail::class.java)
	context.startActivity(intent)
	ref - https://stackoverflow.com/questions/59012821/android-kotlin-new-intent-on-click-event-from-recycler-view
	
//Constraint layout
	//to remove constraint
		select view -> right click remove constraint for that view
		whole view -> toolbar -> clear all constraints -> it will remove constraints of all the views
		
		ctrl + select respective constraint - It will remove that particular constraint
		
	//to spread view equally to occupy screen
		select two view atleast -> right click -> chains -> create horizontal or vertical chains
	//to select multiple views
		use mouse and select all views in design tab
	//guideline
		you can use it to align views on screen 
		eg - guideline1 - 35%
		guideline2 - 65%
		views will be between these guidelines

		
	
//productive apps
	//mobile
		To do List
	//web
		https://app.asana.com/
	
//textview
	//Change text color of one word in a TextView
	val first = "Welcome "
        val next = "<font color='#EE0000'>Abhinesh Chandra</font>"
        textView2Choice.setText(Html.fromHtml(first + next))
	ref - https://stackoverflow.com/questions/7221930/change-text-color-of-one-word-in-a-textview
	
//project name 
	//Change project name on Android Studio
		If your settings.gradle contains the below line, either delete it or update it to the new name.
		rootProject.name = 'Your project name'

//project structure
	create package with proper naming convention and place activities in respective folder
	
//back button
	//disable back button
	//override method and do nothing
	override fun onBackPressed() {
		//if (shouldAllowBack()) {
		//super.onBackPressed()			
		//} else {
		//doSomething()
		//}
    	}
	ref - https://stackoverflow.com/questions/4779954/disable-back-button-in-android
	
//alert dialog
	you can create a basic alert dialog with title, message, positive (yes), negative (no) views
	ref - https://www.youtube.com/watch?v=MMcfdEzfdB4
	   val builder = AlertDialog.Builder(this)
        builder.setTitle("Are you sure!")
        builder.setMessage("Do you want to close the app?")
        builder.setPositiveButton("Yes",{ dialogInterface: DialogInterface, i: Int ->
            finish()
        })
        builder.setNegativeButton("No",{ dialogInterface: DialogInterface, i: Int -> })
	builder.setNeutralButton("Ok",{ dialogInterface: DialogInterface, i: Int -> })
        builder.show()
	 val alert = builder.create()
        Handler(Looper.getMainLooper()).postDelayed({
            //Do something after 100ms
            alert.dismiss() 		--> to dismiss dialog ater few seconds
        }, 3000)
        alert.show()
	you can also create custom alert dialog with checkbox, edit text and buttons
	ref - https://www.youtube.com/watch?v=PqRp3-t9GPM
	
//timer
	val timer1 = object: CountDownTimer(5000, 1000) {
        override fun onTick(millisUntilFinished: Long) {
            Log.d(TAG, "timer is running")
        }
        override fun onFinish() {
            Log.d(TAG, "timer finished")
        }
    	}
	timer1.cancel()  //to cancel previous run
        timer1.start()	//to start new run
//loop  
	val mainHandler = Handler(Looper.getMainLooper())
                            mainHandler.post(object : Runnable {	//to run anything in loop after every 1 sec
                                override fun run() {   
					//run anything here
                                    mainHandler.postDelayed(this, 1000)
                                }
                            })
//Notification
	ref - https://www.tutorialspoint.com/how-to-create-a-notification-alert-using-kotlin
	
//to check build version
	if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { } //it will check for oreo version(O)
	
//views and layout
	you change any view or layout to different types
	change default text view to other type for faster development
	
//Receiver 
	//declare Receiver in manifest
	 <receiver android:name=".MainActivity$Receiver" />
    	</application>
	
//AlarmManager	
	//to do some task at a paticular time
	ref - https://youtu.be/rzxgQOo2ZF4
	alarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + second,pendingIntent)
	set method is enough to get data at exact time
	setExact method throws error
	
//TODO
	//it is useful for writing function you want to implement later
	private fun checkLoggedInState() {
        TODO("Not yet implemented")
    	}
	
//null check for functions
	auth.currentUser?.let {
        }
//Firebase
	//connectivity
		tools -> Firebase -> Authentication -> Email & password authentication -> connect your app to firebase 
		//just follow the steps afer that & your app will be connected
	//add firebase authentication
		tools -> Firebase -> Authentication -> Email & password authentication -> add firebase authentication
		//just accept changes and authentication will be added
		ref - https://youtu.be/xu3bHQWD6A0
		//add coroutines dependencies from above for effectiveness
		//email
			//enable email 
			//enable email(passwordless) -> doesnt required password, link will be sent to the email
	//calling diff firebase function
		//its easy:)
		//create instance of firebase
			auth = FirebaseAuth.getInstance()
		//call diff methods on auth
			eg - auth.createUserWithEmailAndPassword(email,password).await() //to create user with email && password
				auth.signInWithEmailAndPassword(email,password).await() //to login user with email && password
				auth.signOut() //to sign out user
	//google sign in
		//add coroutines dependency from above
		//google sign in dependency
		
//Coroutines
	//call
		CoroutineScope(Dispatchers.IO).launch {
                try {
                    auth.createUserWithEmailAndPassword(email,password).await()  //program will wait till user is created
                    withContext(Dispatchers.Main) {
                        checkLoggedInState()
                    }
                }catch (e: Exception) {
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@MainActivity, e.message, Toast.LENGTH_LONG).show()
                    }
                }
            }
//wifi status
	https://johncodeos.com/how-to-check-for-internet-connection-in-android-using-kotlin/
//toggle button
		https://www.geeksforgeeks.org/togglebutton-in-kotlin/
//bluetooth
		//enable or disable 
		mBluetoothAdapter.enable()
		mBluetoothAdapter.disable()
		//permission
		<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
		
//UI
	//Orientation for preview (O)
	//UI mode
		//you can select diff modes like television,appliance, watch etc to check diff UI looks
	//Night Mode
		//you can select (Night) to see how UI will look in night mode
	//Customize layouts for diff screens sizes
		Orientation for preview (O) -> create other -> choose different qualifiers 
		eg - smallest screen width (smallest width for horizontal or vertical orientation)
		smallest screen width (720) && Screen Orientation (landscape) -> it will generate customize layout for tablets in landscape mode
		
//README
	//always update readme on remote and make a pull request to update local otherwise it will be alot of work
	//cheatsheet - https://github.com/tchapi/markdown-cheatsheet/blob/master/README.md
